// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(CLIENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts       Account[]
  sessions       Session[]
  projectMembers ProjectMember[]
  messages       Message[]
  files          File[]
  createdMeetings Meeting[]       @relation("MeetingCreator")
  meetingAttendees MeetingAttendee[]
  createdTasks   Task[]           @relation("TaskCreator")
  assignedTasks  Task[]           @relation("TaskAssignee")
  projectUpdates ProjectUpdate[]
  notifications  Notification[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id          String    @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus @default(PLANNING)
  startDate   DateTime?
  deadline    DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  members       ProjectMember[]
  updates       ProjectUpdate[]
  messages      Message[]
  files         File[]
  meetings      Meeting[]
  tasks         Task[]
}

model ProjectMember {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  role      Role
  createdAt DateTime @default(now())

  // Relations
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
}

model ProjectUpdate {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  content   String
  createdAt DateTime @default(now())

  // Relations
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Message {
  id        String   @id @default(cuid())
  projectId String
  senderId  String
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  sender    User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model File {
  id          String   @id @default(cuid())
  projectId   String
  uploadedBy  String
  name        String
  filePath    String
  fileType    String?
  fileSize    Int?
  description String?
  createdAt   DateTime @default(now())

  // Relations
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)
}

model Meeting {
  id          String   @id @default(cuid())
  projectId   String
  title       String
  description String?
  meetingDate DateTime
  duration    Int?     // in minutes
  location    String?
  meetingLink String?
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  project    Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  creator    User              @relation("MeetingCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  attendees  MeetingAttendee[]
}

model MeetingAttendee {
  id        String         @id @default(cuid())
  meetingId String
  userId    String
  status    AttendeeStatus @default(PENDING)
  createdAt DateTime       @default(now())

  // Relations
  meeting   Meeting        @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([meetingId, userId])
}

model Task {
  id          String     @id @default(cuid())
  projectId   String
  title       String
  description String?
  status      TaskStatus @default(PENDING)
  dueDate     DateTime?
  assignedTo  String?
  createdBy   String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  creator     User       @relation("TaskCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  assignee    User?      @relation("TaskAssignee", fields: [assignedTo], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  content   String
  type      String
  isRead    Boolean  @default(false)
  relatedId String?
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// For Supabase Realtime
model RealtimeMessage {
  id         String   @id @default(cuid())
  message_id String
  project_id String
  sender_id  String
  content    String
  created_at DateTime @default(now())
}

enum Role {
  ADMIN
  CLIENT
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  REVIEW
  COMPLETED
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum AttendeeStatus {
  PENDING
  ACCEPTED
  DECLINED
}

